//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `PushConfig.plist`.
    static let pushConfigPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "PushConfig", pathExtension: "plist")
    /// Resource file `ccstyle.css`.
    static let ccstyleCss = Rswift.FileResource(bundle: R.hostingBundle, name: "ccstyle", pathExtension: "css")
    /// Resource file `jquery-1.6.4.min.js`.
    static let jquery164MinJs = Rswift.FileResource(bundle: R.hostingBundle, name: "jquery-1.6.4.min", pathExtension: "js")
    
    /// `bundle.url(forResource: "PushConfig", withExtension: "plist")`
    static func pushConfigPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.pushConfigPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "ccstyle", withExtension: "css")`
    static func ccstyleCss(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ccstyleCss
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "jquery-1.6.4.min", withExtension: "js")`
    static func jquery164MinJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jquery164MinJs
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 19 images.
  struct image {
    /// Image `about`.
    static let about = Rswift.ImageResource(bundle: R.hostingBundle, name: "about")
    /// Image `bbs`.
    static let bbs = Rswift.ImageResource(bundle: R.hostingBundle, name: "bbs")
    /// Image `chengxuyuan`.
    static let chengxuyuan = Rswift.ImageResource(bundle: R.hostingBundle, name: "chengxuyuan")
    /// Image `guide_page_1`.
    static let guide_page_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_page_1")
    /// Image `guide_page_2`.
    static let guide_page_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_page_2")
    /// Image `guide_page_3`.
    static let guide_page_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_page_3")
    /// Image `guide_page_4`.
    static let guide_page_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_page_4")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `ic_detail_back`.
    static let ic_detail_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_detail_back")
    /// Image `icon_light`.
    static let icon_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_light")
    /// Image `nav_cancel`.
    static let nav_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_cancel")
    /// Image `nav_like_no`.
    static let nav_like_no = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_like_no")
    /// Image `nav_like_yes`.
    static let nav_like_yes = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_like_yes")
    /// Image `nav_search`.
    static let nav_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "nav_search")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `sharetest`.
    static let sharetest = Rswift.ImageResource(bundle: R.hostingBundle, name: "sharetest")
    /// Image `tabbar_chat`.
    static let tabbar_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_chat")
    /// Image `tabbar_profile`.
    static let tabbar_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_profile")
    /// Image `top`.
    static let top = Rswift.ImageResource(bundle: R.hostingBundle, name: "top")
    
    /// `UIImage(named: "about", bundle: ..., traitCollection: ...)`
    static func about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.about, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bbs", bundle: ..., traitCollection: ...)`
    static func bbs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bbs, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chengxuyuan", bundle: ..., traitCollection: ...)`
    static func chengxuyuan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chengxuyuan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guide_page_1", bundle: ..., traitCollection: ...)`
    static func guide_page_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_page_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guide_page_2", bundle: ..., traitCollection: ...)`
    static func guide_page_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_page_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guide_page_3", bundle: ..., traitCollection: ...)`
    static func guide_page_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_page_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guide_page_4", bundle: ..., traitCollection: ...)`
    static func guide_page_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_page_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_detail_back", bundle: ..., traitCollection: ...)`
    static func ic_detail_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_detail_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_light", bundle: ..., traitCollection: ...)`
    static func icon_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_light, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_cancel", bundle: ..., traitCollection: ...)`
    static func nav_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_like_no", bundle: ..., traitCollection: ...)`
    static func nav_like_no(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_like_no, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_like_yes", bundle: ..., traitCollection: ...)`
    static func nav_like_yes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_like_yes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nav_search", bundle: ..., traitCollection: ...)`
    static func nav_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nav_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sharetest", bundle: ..., traitCollection: ...)`
    static func sharetest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sharetest, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_chat", bundle: ..., traitCollection: ...)`
    static func tabbar_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_chat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_profile", bundle: ..., traitCollection: ...)`
    static func tabbar_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "top", bundle: ..., traitCollection: ...)`
    static func top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 282 localization keys.
    struct localizable {
      /// Value:  手指上滑，取消发送 
      static let messageToolBarRecordUpCancel = Rswift.StringResource(key: "message.toolBar.record.upCancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value:  松开手指，取消发送 
      static let messageToolBarRecordLoosenCancel = Rswift.StringResource(key: "message.toolBar.record.loosenCancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %.f分钟前
      static let nSDateCategoryText2 = Rswift.StringResource(key: "NSDateCategory.text2", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %.f天前
      static let nSDateCategoryText4 = Rswift.StringResource(key: "NSDateCategory.text4", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %.f小时前
      static let nSDateCategoryText3 = Rswift.StringResource(key: "NSDateCategory.text3", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %.f年前
      static let nSDateCategoryText6 = Rswift.StringResource(key: "NSDateCategory.text6", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ 添加你为好友
      static let friendSomebodyAddWithName = Rswift.StringResource(key: "friend.somebodyAddWithName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ 申请加入群组'%@'
      static let groupApplyJoin = Rswift.StringResource(key: "group.applyJoin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ 申请加入群组'%@'：%@
      static let groupApplyJoinWithName = Rswift.StringResource(key: "group.applyJoinWithName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ 邀请你为好友
      static let friendSomebodyInvite = Rswift.StringResource(key: "friend.somebodyInvite", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ 邀请你加入群组'%@'
      static let groupSomebodyInvite = Rswift.StringResource(key: "group.somebodyInvite", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ 邀请你加入聊天室'%@'
      static let chatroomSomebodyInvite = Rswift.StringResource(key: "chatroom.somebodyInvite", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@已经给你发来了申请
      static let friendRepeatInvite = Rswift.StringResource(key: "friend.repeatInvite", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: '%@'加入聊天室'%@'
      static let chatroomJoin = Rswift.StringResource(key: "chatroom.join", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: '%@'已经是你的好友了!
      static let friendRepeat = Rswift.StringResource(key: "friend.repeat", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: '%@'离开聊天室'%@'
      static let chatroomLeave = Rswift.StringResource(key: "chatroom.leave", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 1分钟内
      static let nSDateCategoryText1 = Rswift.StringResource(key: "NSDateCategory.text1", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: M月d日
      static let nSDateCategoryText5 = Rswift.StringResource(key: "NSDateCategory.text5", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SDK 版本
      static let settingSdkVersion = Rswift.StringResource(key: "setting.sdkVersion", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: [位置]
      static let messageLocation1 = Rswift.StringResource(key: "message.location1", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: [图片]
      static let messageImage1 = Rswift.StringResource(key: "message.image1", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: [视频]
      static let messageVideo1 = Rswift.StringResource(key: "message.video1", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: [音频]
      static let messageVoice1 = Rswift.StringResource(key: "message.voice1", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: iOS离线推送昵称
      static let settingIospushname = Rswift.StringResource(key: "setting.iospushname", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 上传失败
      static let settingUploadFail = Rswift.StringResource(key: "setting.uploadFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 上传成功
      static let settingUploadSuccess = Rswift.StringResource(key: "setting.uploadSuccess", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 上传运行日志
      static let settingUploadLog = Rswift.StringResource(key: "setting.uploadLog", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 上午hh:mm
      static let nSDateCategoryText10 = Rswift.StringResource(key: "NSDateCategory.text10", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 下午hh:mm
      static let nSDateCategoryText11 = Rswift.StringResource(key: "NSDateCategory.text11", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 不允许群成员邀请其他人
      static let groupCreateUnallowedOccupantInvite = Rswift.StringResource(key: "group.create.unallowedOccupantInvite", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 不能删除自己
      static let friendNotDeleteSelf = Rswift.StringResource(key: "friend.notDeleteSelf", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 不能添加自己为好友
      static let friendNotAddSelf = Rswift.StringResource(key: "friend.notAddSelf", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 不能跟自己聊天
      static let friendNotChatSelf = Rswift.StringResource(key: "friend.notChatSelf", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 丢包数: 
      static let callVideoLostcnt = Rswift.StringResource(key: "call.videoLostcnt", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 两次输入密码不一致,请重新输入
      static let registerConfirmPassword = Rswift.StringResource(key: "register.confirmPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 个人信息
      static let settingPersonalInfo = Rswift.StringResource(key: "setting.personalInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 个人账户
      static let username = Rswift.StringResource(key: "username", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 今天 %@
      static let nSDateCategoryText14 = Rswift.StringResource(key: "NSDateCategory.text14", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 会话
      static let titleConversation = Rswift.StringResource(key: "title.conversation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 位置
      static let messageLocation = Rswift.StringResource(key: "message.location", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 位置信息
      static let locationMessageType = Rswift.StringResource(key: "location.messageType", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 你的消息包含不当言论
      static let messageForbiddenWords = Rswift.StringResource(key: "message.forbiddenWords", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 你的账号已在其他地方登录
      static let loginAtOtherDevice = Rswift.StringResource(key: "loginAtOtherDevice", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 你的账号已被从服务器端移除
      static let loginUserRemoveFromServer = Rswift.StringResource(key: "loginUserRemoveFromServer", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 你的账号登录失败，正在重试中...  点击 '登出' 按钮跳转到登录页面  点击 '继续等待' 按钮等待重连成功
      static let reconnectionRetry = Rswift.StringResource(key: "reconnection.retry", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 你被'%@'无耻的拒绝了
      static let friendBeRefusedToAdd = Rswift.StringResource(key: "friend.beRefusedToAdd", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 你被从群组'%@'中踢出
      static let groupBeKicked = Rswift.StringResource(key: "group.beKicked", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 使用IP
      static let settingUseIp = Rswift.StringResource(key: "setting.useIp", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 保存
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 保存更改昵称
      static let settingSaveName = Rswift.StringResource(key: "setting.saveName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 修改中...
      static let settingSaving = Rswift.StringResource(key: "setting.saving", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 修改失败
      static let settingSaveFailed = Rswift.StringResource(key: "setting.saveFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 修改群名称
      static let titleGroupSubjectChanging = Rswift.StringResource(key: "title.groupSubjectChanging", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 允许群成员邀请其他人
      static let groupCreateAllowedOccupantInvite = Rswift.StringResource(key: "group.create.allowedOccupantInvite", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 免提
      static let callSpeaker = Rswift.StringResource(key: "call.speaker", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 公有群
      static let groupCreatePublic = Rswift.StringResource(key: "group.create.public", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 公有群组
      static let titlePublicGroup = Rswift.StringResource(key: "title.publicGroup", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 关闭
      static let settingClose = Rswift.StringResource(key: "setting.close", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 凌晨hh:mm
      static let nSDateCategoryText9 = Rswift.StringResource(key: "NSDateCategory.text9", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 创建群组
      static let titleCreateGroup = Rswift.StringResource(key: "title.createGroup", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 创建群组...
      static let groupCreateOngoing = Rswift.StringResource(key: "group.create.ongoing", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 创建群组失败，请重新操作
      static let groupCreateFail = Rswift.StringResource(key: "group.create.fail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 创建群组成功
      static let groupCreateSuccess = Rswift.StringResource(key: "group.create.success", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 初始化AVAudioPlayer失败!
      static let errorInitPlayerFail = Rswift.StringResource(key: "error.initPlayerFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 初始化AVAudioRecorder失败
      static let errorConversionFail = Rswift.StringResource(key: "error.conversionFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 删除
      static let delete = Rswift.StringResource(key: "delete", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 删除失败:%@
      static let deleteFailed = Rswift.StringResource(key: "deleteFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 刷新数据...
      static let refreshData = Rswift.StringResource(key: "refreshData", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 功能消息免打扰
      static let settingNotDisturb = Rswift.StringResource(key: "setting.notDisturb", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 加入群组
      static let groupJoin = Rswift.StringResource(key: "group.join", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 加入群组...
      static let groupJoinOngoing = Rswift.StringResource(key: "group.join.ongoing", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 加入群组失败，请重新操作
      static let groupJoinFail = Rswift.StringResource(key: "group.join.fail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 加入群组需要管理员同意
      static let groupCreateNeedApply = Rswift.StringResource(key: "group.create.needApply", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 加入聊天室'%@'失败
      static let chatroomJoinFailed = Rswift.StringResource(key: "chatroom.joinFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 加入黑名单
      static let friendBlock = Rswift.StringResource(key: "friend.block", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 加载数据...
      static let loadData = Rswift.StringResource(key: "loadData", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 加载数据失败
      static let loadDataFailed = Rswift.StringResource(key: "loadDataFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 发送
      static let send = Rswift.StringResource(key: "send", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 发送加群申请...
      static let groupSendingApply = Rswift.StringResource(key: "group.sendingApply", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 发送申请失败:%@ 原因：%@
      static let groupSendApplyFail = Rswift.StringResource(key: "group.sendApplyFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 发送申请失败，请重新操作
      static let friendSendApplyFail = Rswift.StringResource(key: "friend.sendApplyFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 发送申请成功
      static let friendSendApplySuccess = Rswift.StringResource(key: "friend.sendApplySuccess", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 取消
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 取消通话
      static let callCancel = Rswift.StringResource(key: "call.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 只在夜间开启 (22:00 - 7:00)
      static let settingNightOpen = Rswift.StringResource(key: "setting.nightOpen", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 只接收不提示群消息
      static let groupSettingReceiveAndUnprompt = Rswift.StringResource(key: "group.setting.receiveAndUnprompt", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 可以说话了...
      static let callSpeak = Rswift.StringResource(key: "call.speak", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 可以说话了...Direct
      static let callSpeakDirect = Rswift.StringResource(key: "call.speak.direct", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 可以说话了...Relay
      static let callSpeakRelay = Rswift.StringResource(key: "call.speak.relay", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 同意并已加入群组'%@'
      static let groupAgreedAndJoined = Rswift.StringResource(key: "group.agreedAndJoined", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 否
      static let no = Rswift.StringResource(key: "no", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 图片
      static let messageImage = Rswift.StringResource(key: "message.image", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 填写推送消息时使用的昵称
      static let loginInputApnsNickname = Rswift.StringResource(key: "login.inputApnsNickname", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 复制
      static let copy = Rswift.StringResource(key: "copy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 大图获取失败!
      static let messageImageFail = Rswift.StringResource(key: "message.imageFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 头像
      static let settingPersonalInfoUpload = Rswift.StringResource(key: "setting.personalInfoUpload", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 完成
      static let down = Rswift.StringResource(key: "down", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 定位失败
      static let locationFail = Rswift.StringResource(key: "location.fail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 宽/高: 
      static let callVideoSize = Rswift.StringResource(key: "call.videoSize", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 密码
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 对方比特率: 
      static let callVideoRemoteBitrate = Rswift.StringResource(key: "call.videoRemoteBitrate", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 屏蔽群消息
      static let groupSettingBlockMessage = Rswift.StringResource(key: "group.setting.blockMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 已加入
      static let groupJoined = Rswift.StringResource(key: "group.joined", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 已读
      static let hasRead = Rswift.StringResource(key: "hasRead", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 帧率: 
      static let callVideoFramerate = Rswift.StringResource(key: "call.videoFramerate", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 延迟: 
      static let callVideoTimedelay = Rswift.StringResource(key: "call.videoTimedelay", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 建立连接失败
      static let callConnectFailed = Rswift.StringResource(key: "call.connectFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 开启
      static let settingOpen = Rswift.StringResource(key: "setting.open", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 开始录音失败
      static let messageStartRecordFail = Rswift.StringResource(key: "message.startRecordFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 开始接收离线消息
      static let messageBeginReceiveOffine = Rswift.StringResource(key: "message.beginReceiveOffine", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 当前网络连接失败
      static let networkDisconnection = Rswift.StringResource(key: "network.disconnection", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 录制时间过短
      static let errorRecordTooShort = Rswift.StringResource(key: "error.recordTooShort", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 录音时间太短了
      static let mediaTimeShort = Rswift.StringResource(key: "media.timeShort", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 您已向'%@'发送好友请求了!
      static let friendRepeatApply = Rswift.StringResource(key: "friend.repeatApply", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 您有一条新消息
      static let receiveMessage = Rswift.StringResource(key: "receiveMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 您注册的用户已存在!
      static let registerRepeat = Rswift.StringResource(key: "register.repeat", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 成员加入权限
      static let groupCreateOccupantJoinPermissions = Rswift.StringResource(key: "group.create.occupantJoinPermissions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 成员邀请权限
      static let groupCreateOccupantPermissions = Rswift.StringResource(key: "group.create.occupantPermissions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 我的聊天室
      static let titleMychatroom = Rswift.StringResource(key: "title.mychatroom", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 打开
      static let `open` = Rswift.StringResource(key: "open", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 拍照上传
      static let settingCameraUpload = Rswift.StringResource(key: "setting.cameraUpload", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 拒接
      static let callReject = Rswift.StringResource(key: "call.reject", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 拒接通话
      static let callRejected = Rswift.StringResource(key: "call.rejected", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 拒绝
      static let reject = Rswift.StringResource(key: "reject", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 拒绝失败
      static let rejectFail = Rswift.StringResource(key: "rejectFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 挂断
      static let callHangup = Rswift.StringResource(key: "call.hangup", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 按住说话
      static let messageToolBarRecordTouch = Rswift.StringResource(key: "message.toolBar.record.touch", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 接受
      static let accept = Rswift.StringResource(key: "accept", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 接受失败
      static let acceptFail = Rswift.StringResource(key: "acceptFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 接听
      static let callAnswer = Rswift.StringResource(key: "call.answer", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 接收并提示群消息
      static let groupSettingReceiveAndPrompt = Rswift.StringResource(key: "group.setting.receiveAndPrompt", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 推送内容
      static let apnsContent = Rswift.StringResource(key: "apns.content", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 描述
      static let chatroomDescription = Rswift.StringResource(key: "chatroom.description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 提示
      static let prompt = Rswift.StringResource(key: "prompt", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 搜索
      static let search = Rswift.StringResource(key: "search", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 搜索结果
      static let searchResults = Rswift.StringResource(key: "searchResults", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 播放失败!
      static let errorPalyFail = Rswift.StringResource(key: "error.palyFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 文件格式转换失败
      static let errorInitRecorderFail = Rswift.StringResource(key: "error.initRecorderFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 文件路径不存在
      static let errorNotFound = Rswift.StringResource(key: "error.notFound", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 新建群聊
      static let groupCreateGroup = Rswift.StringResource(key: "group.create.group", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 昨天 %@
      static let nSDateCategoryText7 = Rswift.StringResource(key: "NSDateCategory.text7", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 昨天HH:mm
      static let nSDateCategoryText13 = Rswift.StringResource(key: "NSDateCategory.text13", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 昨天HH:mm
      static let nSDateCategoryText8 = Rswift.StringResource(key: "NSDateCategory.text8", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 是
      static let yes = Rswift.StringResource(key: "yes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 昵称
      static let settingProfileNickname = Rswift.StringResource(key: "setting.profileNickname", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 昵称不能为空
      static let settingNamenotempty = Rswift.StringResource(key: "setting.namenotempty", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 显示视频通话信息
      static let settingShowCallInfo = Rswift.StringResource(key: "setting.showCallInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 晚上hh:mm
      static let nSDateCategoryText12 = Rswift.StringResource(key: "NSDateCategory.text12", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 更改昵称
      static let settingEditName = Rswift.StringResource(key: "setting.editName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 有透传消息
      static let receiveCmd = Rswift.StringResource(key: "receiveCmd", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 未获得授权使用相机
      static let settingCameraNoAuthority = Rswift.StringResource(key: "setting.cameraNoAuthority", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 未获得授权使用麦克风
      static let settingMicrophoneNoAuthority = Rswift.StringResource(key: "setting.microphoneNoAuthority", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 本地比特率: 
      static let callVideoLocalBitrate = Rswift.StringResource(key: "call.videoLocalBitrate", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 松开发送
      static let messageToolBarRecordSend = Rswift.StringResource(key: "message.toolBar.record.send", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 模拟器不支持录像
      static let messageSimulatorNotSupportVideo = Rswift.StringResource(key: "message.simulatorNotSupportVideo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 模拟器不支持拍照
      static let messageSimulatorNotSupportCamera = Rswift.StringResource(key: "message.simulatorNotSupportCamera", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在上传...
      static let settingUploading = Rswift.StringResource(key: "setting.uploading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在下载语音，稍后点击
      static let messageDownloadingAudio = Rswift.StringResource(key: "message.downloadingAudio", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在初始化通话...
      static let callInit = Rswift.StringResource(key: "call.init", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在删除成员...
      static let groupRemovingOccupant = Rswift.StringResource(key: "group.removingOccupant", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在加入...
      static let chatroomJoining = Rswift.StringResource(key: "chatroom.joining", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在发送申请...
      static let friendSendApply = Rswift.StringResource(key: "friend.sendApply", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在发送申请...
      static let sendingApply = Rswift.StringResource(key: "sendingApply", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在定位...
      static let locationOngoning = Rswift.StringResource(key: "location.ongoning", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在将成员加入黑名单...
      static let groupBanAdding = Rswift.StringResource(key: "group.ban.adding", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在将成员移出黑名单...
      static let groupBanRemoving = Rswift.StringResource(key: "group.ban.removing", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在建立连接...
      static let callConnecting = Rswift.StringResource(key: "call.connecting", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在搜索
      static let searching = Rswift.StringResource(key: "searching", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在注册...
      static let registerOngoing = Rswift.StringResource(key: "register.ongoing", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在登陆...
      static let loginOngoing = Rswift.StringResource(key: "login.ongoing", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在结束通话...
      static let callDealloc = Rswift.StringResource(key: "call.dealloc", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在获取大图...
      static let messageDownloadingImage = Rswift.StringResource(key: "message.downloadingImage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在获取视频...
      static let messageDownloadingVideo = Rswift.StringResource(key: "message.downloadingVideo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在退出...
      static let settingLogoutOngoing = Rswift.StringResource(key: "setting.logoutOngoing", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在通话中...
      static let callIn = Rswift.StringResource(key: "call.in", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 正在重连中...
      static let reconnectionOngoing = Rswift.StringResource(key: "reconnection.ongoing", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 此设置会导致全天都处于免打扰模式, 不会再收到推送消息. 是否继续?
      static let settingSureNotDisturb = Rswift.StringResource(key: "setting.sureNotDisturb", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 没有找到
      static let notFound = Rswift.StringResource(key: "notFound", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 没有更多数据了
      static let noMore = Rswift.StringResource(key: "noMore", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 注册
      static let register = Rswift.StringResource(key: "register", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 注册失败
      static let registerFail = Rswift.StringResource(key: "register.fail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 注册成功，请登陆
      static let registerSuccess = Rswift.StringResource(key: "register.success", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 注册推送失败
      static let apnsFailToRegisterApns = Rswift.StringResource(key: "apns.failToRegisterApns", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 消息已经清空
      static let messageNoMessage = Rswift.StringResource(key: "message.noMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 消息推送与设备绑定失败
      static let apnsFailToBindDeviceToken = Rswift.StringResource(key: "apns.failToBindDeviceToken", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 消息推送设置
      static let titleApnsSetting = Rswift.StringResource(key: "title.apnsSetting", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 添加
      static let add = Rswift.StringResource(key: "add", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 添加公开群
      static let groupCreateJoin = Rswift.StringResource(key: "group.create.join", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 添加好友
      static let friendAdd = Rswift.StringResource(key: "friend.add", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 添加成员
      static let groupCreateAddOccupant = Rswift.StringResource(key: "group.create.addOccupant", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 添加组成员...
      static let groupAddingOccupant = Rswift.StringResource(key: "group.addingOccupant", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 添加群成员失败, 请稍后再试
      static let groupAddOccupantFail = Rswift.StringResource(key: "group.addOccupantFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 清空聊天记录
      static let groupRemoveAllMessages = Rswift.StringResource(key: "group.removeAllMessages", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 环信Demo
      static let appName = Rswift.StringResource(key: "AppName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 环信助手
      static let titleRobotlist = Rswift.StringResource(key: "title.robotlist", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 用户名不支持中文
      static let loginNameNotSupportZh = Rswift.StringResource(key: "login.nameNotSupportZh", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 申请与通知
      static let titleApply = Rswift.StringResource(key: "title.apply", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 申请已发送
      static let groupSendApplyRepeat = Rswift.StringResource(key: "group.sendApplyRepeat", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 登出
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 登录
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 登录失败
      static let loginFail = Rswift.StringResource(key: "login.fail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 相册上传
      static let settingLocalUpload = Rswift.StringResource(key: "setting.localUpload", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 确定
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 确定(%i)
      static let doneWithCount = Rswift.StringResource(key: "doneWithCount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 确认密码
      static let confirmpassword = Rswift.StringResource(key: "confirmpassword", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 离线消息接收成功
      static let messageEndReceiveOffine = Rswift.StringResource(key: "message.endReceiveOffine", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 私有群
      static let groupCreatePrivate = Rswift.StringResource(key: "group.create.private", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 等待接听...
      static let callWaiting = Rswift.StringResource(key: "call.waiting", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 继续等待
      static let reconnectionWait = Rswift.StringResource(key: "reconnection.wait", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 缩略图获取失败!
      static let messageThumImageFail = Rswift.StringResource(key: "message.thumImageFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 网络未连接!
      static let errorConnectNetworkFail = Rswift.StringResource(key: "error.connectNetworkFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 群主
      static let groupOwner = Rswift.StringResource(key: "group.owner", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 群成员个数超了最大值了
      static let groupMaxUserCount = Rswift.StringResource(key: "group.maxUserCount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 群组
      static let titleGroup = Rswift.StringResource(key: "title.group", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 群组ID
      static let groupId = Rswift.StringResource(key: "group.id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 群组人数
      static let groupOccupantCount = Rswift.StringResource(key: "group.occupantCount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 群组权限
      static let groupCreateGroupPermission = Rswift.StringResource(key: "group.create.groupPermission", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 群组简介
      static let groupDescribe = Rswift.StringResource(key: "group.describe", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 群组通知
      static let titleGroupApply = Rswift.StringResource(key: "title.groupApply", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 群组黑名单
      static let titleGroupBlackList = Rswift.StringResource(key: "title.groupBlackList", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 群设置
      static let titleGroupSetting = Rswift.StringResource(key: "title.groupSetting", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 聊天室
      static let titleChatroom = Rswift.StringResource(key: "title.chatroom", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 聊天室Id
      static let chatroomId = Rswift.StringResource(key: "chatroom.id", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 聊天室人数
      static let chatroomOccupantCount = Rswift.StringResource(key: "chatroom.occupantCount", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 聊天室列表
      static let titleChatroomlist = Rswift.StringResource(key: "title.chatroomlist", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 自动登录
      static let settingAutoLogin = Rswift.StringResource(key: "setting.autoLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 自动登录失败.
      static let loginErrorAutoLogin = Rswift.StringResource(key: "login.errorAutoLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 自动登录开始...
      static let loginBeginAutoLogin = Rswift.StringResource(key: "login.beginAutoLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 自动登录结束...
      static let loginEndAutoLogin = Rswift.StringResource(key: "login.endAutoLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 获取群组详情失败，请稍后重试
      static let groupFetchInfoFail = Rswift.StringResource(key: "group.fetchInfoFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 获取群组黑名单...
      static let groupBanFetching = Rswift.StringResource(key: "group.ban.fetching", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 获取聊天室详情失败
      static let chatroomFetchInfoFail = Rswift.StringResource(key: "chatroom.fetchInfoFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 获取黑名单失败: %@
      static let groupBanFetchFail = Rswift.StringResource(key: "group.ban.fetchFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 被拒绝加入群组'%@'
      static let groupBeRefusedToJoin = Rswift.StringResource(key: "group.beRefusedToJoin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 被踢出聊天室'%@'
      static let chatroomRemove = Rswift.StringResource(key: "chatroom.remove", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 视频
      static let messageVideo = Rswift.StringResource(key: "message.video", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 视频获取失败!
      static let messageVideoFail = Rswift.StringResource(key: "message.videoFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 解散群组
      static let groupDestroy = Rswift.StringResource(key: "group.destroy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 解散群组失败
      static let groupDestroyFail = Rswift.StringResource(key: "group.destroyFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 设置
      static let titleSetting = Rswift.StringResource(key: "title.setting", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 设置失败
      static let groupSettingFail = Rswift.StringResource(key: "group.setting.fail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 设置属性
      static let groupSettingSave = Rswift.StringResource(key: "group.setting.save", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 设置成功
      static let groupSettingSuccess = Rswift.StringResource(key: "group.setting.success", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 设置此昵称以后,在与iOS客户端demo聊天工程中,iOS一侧会显示此昵称而不是环信ID,如果对方使用安卓客户端则此设置不生效
      static let settingEdittips = Rswift.StringResource(key: "setting.edittips", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 诊断
      static let titleDebug = Rswift.StringResource(key: "title.debug", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 详细资料
      static let titleProfile = Rswift.StringResource(key: "title.profile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 语音录制还没有结束
      static let errorRecordStoping = Rswift.StringResource(key: "error.recordStoping", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 说点啥子吧
      static let saySomething = Rswift.StringResource(key: "saySomething", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 请在iOS"设置中"-"隐私"-"相机"中打开
      static let settingCameraAuthority = Rswift.StringResource(key: "setting.cameraAuthority", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 请在iOS"设置中"-"隐私"-"麦克风"中打开
      static let settingMicrophoneAuthority = Rswift.StringResource(key: "setting.microphoneAuthority", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 请确定删除
      static let sureToDelete = Rswift.StringResource(key: "sureToDelete", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 请等待...
      static let wait = Rswift.StringResource(key: "wait", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 请输入新昵称
      static let settingInputName = Rswift.StringResource(key: "setting.inputName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 请输入群组名称
      static let groupCreateInputName = Rswift.StringResource(key: "group.create.inputName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 请输入群组名称
      static let groupSettingSubject = Rswift.StringResource(key: "group.setting.subject", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 请输入群组简介
      static let groupCreateInputDescribe = Rswift.StringResource(key: "group.create.inputDescribe", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 请输入账号和密码
      static let loginInputNameAndPswd = Rswift.StringResource(key: "login.inputNameAndPswd", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 输入新消息
      static let messageToolBarInputPlaceHolder = Rswift.StringResource(key: "message.toolBar.inputPlaceHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 输入要查找的好友
      static let friendInputNameToSearch = Rswift.StringResource(key: "friend.inputNameToSearch", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 还没有开始语音录制
      static let errorRecordNotBegin = Rswift.StringResource(key: "error.recordNotBegin", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 连接服务器失败!
      static let errorConnectServerFail = Rswift.StringResource(key: "error.connectServerFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 连接服务器超时!
      static let errorConnectServerTimeout = Rswift.StringResource(key: "error.connectServerTimeout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 退出登录(%@)
      static let settingLoginUser = Rswift.StringResource(key: "setting.loginUser", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 退出群组
      static let groupLeave = Rswift.StringResource(key: "group.leave", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 退出群组失败
      static let groupLeaveFail = Rswift.StringResource(key: "group.leaveFail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 退群时删除会话
      static let settingDeleteConWhenLeave = Rswift.StringResource(key: "setting.deleteConWhenLeave", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 选择
      static let choose = Rswift.StringResource(key: "choose", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 选择联系人
      static let titleChooseContact = Rswift.StringResource(key: "title.chooseContact", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 通知显示消息详情
      static let settingShowDetail = Rswift.StringResource(key: "setting.showDetail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 通讯录
      static let titleAddressbook = Rswift.StringResource(key: "title.addressbook", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 通话失败
      static let callFailed = Rswift.StringResource(key: "call.failed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 通话已挂断
      static let callSuspended = Rswift.StringResource(key: "call.suspended", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 通话建立失败
      static let callInitFailed = Rswift.StringResource(key: "call.initFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 通话结束
      static let callOver = Rswift.StringResource(key: "call.over", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 重连失败，稍候将继续重连
      static let reconnectionFail = Rswift.StringResource(key: "reconnection.fail", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 重连成功！
      static let reconnectionSuccess = Rswift.StringResource(key: "reconnection.success", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 错误
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 随便加入
      static let groupCreateOpen = Rswift.StringResource(key: "group.create.open", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 静音
      static let callSilence = Rswift.StringResource(key: "call.silence", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 音频
      static let messageVoice = Rswift.StringResource(key: "message.voice", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 黑名单
      static let friendBlack = Rswift.StringResource(key: "friend.black", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 黑名单
      static let titleBuddyBlock = Rswift.StringResource(key: "title.buddyBlock", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value:  手指上滑，取消发送 
      static func messageToolBarRecordUpCancel(_: Void = ()) -> String {
        return NSLocalizedString("message.toolBar.record.upCancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value:  松开手指，取消发送 
      static func messageToolBarRecordLoosenCancel(_: Void = ()) -> String {
        return NSLocalizedString("message.toolBar.record.loosenCancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: %.f分钟前
      static func nSDateCategoryText2(_: Void = ()) -> String {
        return NSLocalizedString("NSDateCategory.text2", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: %.f天前
      static func nSDateCategoryText4(_: Void = ()) -> String {
        return NSLocalizedString("NSDateCategory.text4", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: %.f小时前
      static func nSDateCategoryText3(_: Void = ()) -> String {
        return NSLocalizedString("NSDateCategory.text3", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: %.f年前
      static func nSDateCategoryText6(_: Void = ()) -> String {
        return NSLocalizedString("NSDateCategory.text6", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: %@ 添加你为好友
      static func friendSomebodyAddWithName(_ value1: String) -> String {
        return String(format: NSLocalizedString("friend.somebodyAddWithName", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ 申请加入群组'%@'
      static func groupApplyJoin(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("group.applyJoin", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: %@ 申请加入群组'%@'：%@
      static func groupApplyJoinWithName(_ value1: String, _ value2: String, _ value3: String) -> String {
        return String(format: NSLocalizedString("group.applyJoinWithName", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// Value: %@ 邀请你为好友
      static func friendSomebodyInvite(_ value1: String) -> String {
        return String(format: NSLocalizedString("friend.somebodyInvite", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ 邀请你加入群组'%@'
      static func groupSomebodyInvite(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("group.somebodyInvite", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: %@ 邀请你加入聊天室'%@'
      static func chatroomSomebodyInvite(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("chatroom.somebodyInvite", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: %@已经给你发来了申请
      static func friendRepeatInvite(_ value1: String) -> String {
        return String(format: NSLocalizedString("friend.repeatInvite", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: '%@'加入聊天室'%@'
      static func chatroomJoin(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("chatroom.join", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: '%@'已经是你的好友了!
      static func friendRepeat(_ value1: String) -> String {
        return String(format: NSLocalizedString("friend.repeat", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: '%@'离开聊天室'%@'
      static func chatroomLeave(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("chatroom.leave", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: 1分钟内
      static func nSDateCategoryText1(_: Void = ()) -> String {
        return NSLocalizedString("NSDateCategory.text1", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: M月d日
      static func nSDateCategoryText5(_: Void = ()) -> String {
        return NSLocalizedString("NSDateCategory.text5", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SDK 版本
      static func settingSdkVersion(_: Void = ()) -> String {
        return NSLocalizedString("setting.sdkVersion", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: [位置]
      static func messageLocation1(_: Void = ()) -> String {
        return NSLocalizedString("message.location1", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: [图片]
      static func messageImage1(_: Void = ()) -> String {
        return NSLocalizedString("message.image1", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: [视频]
      static func messageVideo1(_: Void = ()) -> String {
        return NSLocalizedString("message.video1", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: [音频]
      static func messageVoice1(_: Void = ()) -> String {
        return NSLocalizedString("message.voice1", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: iOS离线推送昵称
      static func settingIospushname(_: Void = ()) -> String {
        return NSLocalizedString("setting.iospushname", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 上传失败
      static func settingUploadFail(_: Void = ()) -> String {
        return NSLocalizedString("setting.uploadFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 上传成功
      static func settingUploadSuccess(_: Void = ()) -> String {
        return NSLocalizedString("setting.uploadSuccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 上传运行日志
      static func settingUploadLog(_: Void = ()) -> String {
        return NSLocalizedString("setting.uploadLog", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 上午hh:mm
      static func nSDateCategoryText10(_: Void = ()) -> String {
        return NSLocalizedString("NSDateCategory.text10", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 下午hh:mm
      static func nSDateCategoryText11(_: Void = ()) -> String {
        return NSLocalizedString("NSDateCategory.text11", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 不允许群成员邀请其他人
      static func groupCreateUnallowedOccupantInvite(_: Void = ()) -> String {
        return NSLocalizedString("group.create.unallowedOccupantInvite", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 不能删除自己
      static func friendNotDeleteSelf(_: Void = ()) -> String {
        return NSLocalizedString("friend.notDeleteSelf", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 不能添加自己为好友
      static func friendNotAddSelf(_: Void = ()) -> String {
        return NSLocalizedString("friend.notAddSelf", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 不能跟自己聊天
      static func friendNotChatSelf(_: Void = ()) -> String {
        return NSLocalizedString("friend.notChatSelf", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 丢包数: 
      static func callVideoLostcnt(_: Void = ()) -> String {
        return NSLocalizedString("call.videoLostcnt", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 两次输入密码不一致,请重新输入
      static func registerConfirmPassword(_: Void = ()) -> String {
        return NSLocalizedString("register.confirmPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 个人信息
      static func settingPersonalInfo(_: Void = ()) -> String {
        return NSLocalizedString("setting.personalInfo", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 个人账户
      static func username(_: Void = ()) -> String {
        return NSLocalizedString("username", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 今天 %@
      static func nSDateCategoryText14(_ value1: String) -> String {
        return String(format: NSLocalizedString("NSDateCategory.text14", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 会话
      static func titleConversation(_: Void = ()) -> String {
        return NSLocalizedString("title.conversation", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 位置
      static func messageLocation(_: Void = ()) -> String {
        return NSLocalizedString("message.location", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 位置信息
      static func locationMessageType(_: Void = ()) -> String {
        return NSLocalizedString("location.messageType", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 你的消息包含不当言论
      static func messageForbiddenWords(_: Void = ()) -> String {
        return NSLocalizedString("message.forbiddenWords", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 你的账号已在其他地方登录
      static func loginAtOtherDevice(_: Void = ()) -> String {
        return NSLocalizedString("loginAtOtherDevice", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 你的账号已被从服务器端移除
      static func loginUserRemoveFromServer(_: Void = ()) -> String {
        return NSLocalizedString("loginUserRemoveFromServer", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 你的账号登录失败，正在重试中...  点击 '登出' 按钮跳转到登录页面  点击 '继续等待' 按钮等待重连成功
      static func reconnectionRetry(_: Void = ()) -> String {
        return NSLocalizedString("reconnection.retry", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 你被'%@'无耻的拒绝了
      static func friendBeRefusedToAdd(_ value1: String) -> String {
        return String(format: NSLocalizedString("friend.beRefusedToAdd", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 你被从群组'%@'中踢出
      static func groupBeKicked(_ value1: String) -> String {
        return String(format: NSLocalizedString("group.beKicked", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 使用IP
      static func settingUseIp(_: Void = ()) -> String {
        return NSLocalizedString("setting.useIp", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 保存
      static func save(_: Void = ()) -> String {
        return NSLocalizedString("save", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 保存更改昵称
      static func settingSaveName(_: Void = ()) -> String {
        return NSLocalizedString("setting.saveName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 修改中...
      static func settingSaving(_: Void = ()) -> String {
        return NSLocalizedString("setting.saving", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 修改失败
      static func settingSaveFailed(_: Void = ()) -> String {
        return NSLocalizedString("setting.saveFailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 修改群名称
      static func titleGroupSubjectChanging(_: Void = ()) -> String {
        return NSLocalizedString("title.groupSubjectChanging", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 允许群成员邀请其他人
      static func groupCreateAllowedOccupantInvite(_: Void = ()) -> String {
        return NSLocalizedString("group.create.allowedOccupantInvite", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 免提
      static func callSpeaker(_: Void = ()) -> String {
        return NSLocalizedString("call.speaker", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 公有群
      static func groupCreatePublic(_: Void = ()) -> String {
        return NSLocalizedString("group.create.public", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 公有群组
      static func titlePublicGroup(_: Void = ()) -> String {
        return NSLocalizedString("title.publicGroup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 关闭
      static func settingClose(_: Void = ()) -> String {
        return NSLocalizedString("setting.close", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 凌晨hh:mm
      static func nSDateCategoryText9(_: Void = ()) -> String {
        return NSLocalizedString("NSDateCategory.text9", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 创建群组
      static func titleCreateGroup(_: Void = ()) -> String {
        return NSLocalizedString("title.createGroup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 创建群组...
      static func groupCreateOngoing(_: Void = ()) -> String {
        return NSLocalizedString("group.create.ongoing", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 创建群组失败，请重新操作
      static func groupCreateFail(_: Void = ()) -> String {
        return NSLocalizedString("group.create.fail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 创建群组成功
      static func groupCreateSuccess(_: Void = ()) -> String {
        return NSLocalizedString("group.create.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 初始化AVAudioPlayer失败!
      static func errorInitPlayerFail(_: Void = ()) -> String {
        return NSLocalizedString("error.initPlayerFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 初始化AVAudioRecorder失败
      static func errorConversionFail(_: Void = ()) -> String {
        return NSLocalizedString("error.conversionFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 删除
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 删除失败:%@
      static func deleteFailed(_ value1: String) -> String {
        return String(format: NSLocalizedString("deleteFailed", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 刷新数据...
      static func refreshData(_: Void = ()) -> String {
        return NSLocalizedString("refreshData", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 功能消息免打扰
      static func settingNotDisturb(_: Void = ()) -> String {
        return NSLocalizedString("setting.notDisturb", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 加入群组
      static func groupJoin(_: Void = ()) -> String {
        return NSLocalizedString("group.join", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 加入群组...
      static func groupJoinOngoing(_: Void = ()) -> String {
        return NSLocalizedString("group.join.ongoing", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 加入群组失败，请重新操作
      static func groupJoinFail(_: Void = ()) -> String {
        return NSLocalizedString("group.join.fail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 加入群组需要管理员同意
      static func groupCreateNeedApply(_: Void = ()) -> String {
        return NSLocalizedString("group.create.needApply", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 加入聊天室'%@'失败
      static func chatroomJoinFailed(_ value1: String) -> String {
        return String(format: NSLocalizedString("chatroom.joinFailed", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 加入黑名单
      static func friendBlock(_: Void = ()) -> String {
        return NSLocalizedString("friend.block", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 加载数据...
      static func loadData(_: Void = ()) -> String {
        return NSLocalizedString("loadData", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 加载数据失败
      static func loadDataFailed(_: Void = ()) -> String {
        return NSLocalizedString("loadDataFailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 发送
      static func send(_: Void = ()) -> String {
        return NSLocalizedString("send", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 发送加群申请...
      static func groupSendingApply(_: Void = ()) -> String {
        return NSLocalizedString("group.sendingApply", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 发送申请失败:%@ 原因：%@
      static func groupSendApplyFail(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("group.sendApplyFail", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: 发送申请失败，请重新操作
      static func friendSendApplyFail(_: Void = ()) -> String {
        return NSLocalizedString("friend.sendApplyFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 发送申请成功
      static func friendSendApplySuccess(_: Void = ()) -> String {
        return NSLocalizedString("friend.sendApplySuccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 取消
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 取消通话
      static func callCancel(_: Void = ()) -> String {
        return NSLocalizedString("call.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 只在夜间开启 (22:00 - 7:00)
      static func settingNightOpen(_: Void = ()) -> String {
        return NSLocalizedString("setting.nightOpen", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 只接收不提示群消息
      static func groupSettingReceiveAndUnprompt(_: Void = ()) -> String {
        return NSLocalizedString("group.setting.receiveAndUnprompt", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 可以说话了...
      static func callSpeak(_: Void = ()) -> String {
        return NSLocalizedString("call.speak", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 可以说话了...Direct
      static func callSpeakDirect(_: Void = ()) -> String {
        return NSLocalizedString("call.speak.direct", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 可以说话了...Relay
      static func callSpeakRelay(_: Void = ()) -> String {
        return NSLocalizedString("call.speak.relay", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 同意并已加入群组'%@'
      static func groupAgreedAndJoined(_ value1: String) -> String {
        return String(format: NSLocalizedString("group.agreedAndJoined", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 否
      static func no(_: Void = ()) -> String {
        return NSLocalizedString("no", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 图片
      static func messageImage(_: Void = ()) -> String {
        return NSLocalizedString("message.image", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 填写推送消息时使用的昵称
      static func loginInputApnsNickname(_: Void = ()) -> String {
        return NSLocalizedString("login.inputApnsNickname", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 复制
      static func copy(_: Void = ()) -> String {
        return NSLocalizedString("copy", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 大图获取失败!
      static func messageImageFail(_: Void = ()) -> String {
        return NSLocalizedString("message.imageFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 头像
      static func settingPersonalInfoUpload(_: Void = ()) -> String {
        return NSLocalizedString("setting.personalInfoUpload", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 完成
      static func down(_: Void = ()) -> String {
        return NSLocalizedString("down", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 定位失败
      static func locationFail(_: Void = ()) -> String {
        return NSLocalizedString("location.fail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 宽/高: 
      static func callVideoSize(_: Void = ()) -> String {
        return NSLocalizedString("call.videoSize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 密码
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("password", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 对方比特率: 
      static func callVideoRemoteBitrate(_: Void = ()) -> String {
        return NSLocalizedString("call.videoRemoteBitrate", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 屏蔽群消息
      static func groupSettingBlockMessage(_: Void = ()) -> String {
        return NSLocalizedString("group.setting.blockMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 已加入
      static func groupJoined(_: Void = ()) -> String {
        return NSLocalizedString("group.joined", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 已读
      static func hasRead(_: Void = ()) -> String {
        return NSLocalizedString("hasRead", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 帧率: 
      static func callVideoFramerate(_: Void = ()) -> String {
        return NSLocalizedString("call.videoFramerate", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 延迟: 
      static func callVideoTimedelay(_: Void = ()) -> String {
        return NSLocalizedString("call.videoTimedelay", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 建立连接失败
      static func callConnectFailed(_: Void = ()) -> String {
        return NSLocalizedString("call.connectFailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 开启
      static func settingOpen(_: Void = ()) -> String {
        return NSLocalizedString("setting.open", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 开始录音失败
      static func messageStartRecordFail(_: Void = ()) -> String {
        return NSLocalizedString("message.startRecordFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 开始接收离线消息
      static func messageBeginReceiveOffine(_: Void = ()) -> String {
        return NSLocalizedString("message.beginReceiveOffine", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 当前网络连接失败
      static func networkDisconnection(_: Void = ()) -> String {
        return NSLocalizedString("network.disconnection", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 录制时间过短
      static func errorRecordTooShort(_: Void = ()) -> String {
        return NSLocalizedString("error.recordTooShort", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 录音时间太短了
      static func mediaTimeShort(_: Void = ()) -> String {
        return NSLocalizedString("media.timeShort", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 您已向'%@'发送好友请求了!
      static func friendRepeatApply(_ value1: String) -> String {
        return String(format: NSLocalizedString("friend.repeatApply", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 您有一条新消息
      static func receiveMessage(_: Void = ()) -> String {
        return NSLocalizedString("receiveMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 您注册的用户已存在!
      static func registerRepeat(_: Void = ()) -> String {
        return NSLocalizedString("register.repeat", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 成员加入权限
      static func groupCreateOccupantJoinPermissions(_: Void = ()) -> String {
        return NSLocalizedString("group.create.occupantJoinPermissions", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 成员邀请权限
      static func groupCreateOccupantPermissions(_: Void = ()) -> String {
        return NSLocalizedString("group.create.occupantPermissions", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 我的聊天室
      static func titleMychatroom(_: Void = ()) -> String {
        return NSLocalizedString("title.mychatroom", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 打开
      static func `open`(_: Void = ()) -> String {
        return NSLocalizedString("open", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 拍照上传
      static func settingCameraUpload(_: Void = ()) -> String {
        return NSLocalizedString("setting.cameraUpload", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 拒接
      static func callReject(_: Void = ()) -> String {
        return NSLocalizedString("call.reject", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 拒接通话
      static func callRejected(_: Void = ()) -> String {
        return NSLocalizedString("call.rejected", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 拒绝
      static func reject(_: Void = ()) -> String {
        return NSLocalizedString("reject", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 拒绝失败
      static func rejectFail(_: Void = ()) -> String {
        return NSLocalizedString("rejectFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 挂断
      static func callHangup(_: Void = ()) -> String {
        return NSLocalizedString("call.hangup", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 按住说话
      static func messageToolBarRecordTouch(_: Void = ()) -> String {
        return NSLocalizedString("message.toolBar.record.touch", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 接受
      static func accept(_: Void = ()) -> String {
        return NSLocalizedString("accept", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 接受失败
      static func acceptFail(_: Void = ()) -> String {
        return NSLocalizedString("acceptFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 接听
      static func callAnswer(_: Void = ()) -> String {
        return NSLocalizedString("call.answer", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 接收并提示群消息
      static func groupSettingReceiveAndPrompt(_: Void = ()) -> String {
        return NSLocalizedString("group.setting.receiveAndPrompt", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 推送内容
      static func apnsContent(_: Void = ()) -> String {
        return NSLocalizedString("apns.content", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 描述
      static func chatroomDescription(_: Void = ()) -> String {
        return NSLocalizedString("chatroom.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 提示
      static func prompt(_: Void = ()) -> String {
        return NSLocalizedString("prompt", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 搜索
      static func search(_: Void = ()) -> String {
        return NSLocalizedString("search", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 搜索结果
      static func searchResults(_: Void = ()) -> String {
        return NSLocalizedString("searchResults", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 播放失败!
      static func errorPalyFail(_: Void = ()) -> String {
        return NSLocalizedString("error.palyFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 文件格式转换失败
      static func errorInitRecorderFail(_: Void = ()) -> String {
        return NSLocalizedString("error.initRecorderFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 文件路径不存在
      static func errorNotFound(_: Void = ()) -> String {
        return NSLocalizedString("error.notFound", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 新建群聊
      static func groupCreateGroup(_: Void = ()) -> String {
        return NSLocalizedString("group.create.group", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 昨天 %@
      static func nSDateCategoryText7(_ value1: String) -> String {
        return String(format: NSLocalizedString("NSDateCategory.text7", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 昨天HH:mm
      static func nSDateCategoryText13(_: Void = ()) -> String {
        return NSLocalizedString("NSDateCategory.text13", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 昨天HH:mm
      static func nSDateCategoryText8(_: Void = ()) -> String {
        return NSLocalizedString("NSDateCategory.text8", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 是
      static func yes(_: Void = ()) -> String {
        return NSLocalizedString("yes", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 昵称
      static func settingProfileNickname(_: Void = ()) -> String {
        return NSLocalizedString("setting.profileNickname", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 昵称不能为空
      static func settingNamenotempty(_: Void = ()) -> String {
        return NSLocalizedString("setting.namenotempty", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 显示视频通话信息
      static func settingShowCallInfo(_: Void = ()) -> String {
        return NSLocalizedString("setting.showCallInfo", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 晚上hh:mm
      static func nSDateCategoryText12(_: Void = ()) -> String {
        return NSLocalizedString("NSDateCategory.text12", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 更改昵称
      static func settingEditName(_: Void = ()) -> String {
        return NSLocalizedString("setting.editName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 有透传消息
      static func receiveCmd(_: Void = ()) -> String {
        return NSLocalizedString("receiveCmd", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 未获得授权使用相机
      static func settingCameraNoAuthority(_: Void = ()) -> String {
        return NSLocalizedString("setting.cameraNoAuthority", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 未获得授权使用麦克风
      static func settingMicrophoneNoAuthority(_: Void = ()) -> String {
        return NSLocalizedString("setting.microphoneNoAuthority", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 本地比特率: 
      static func callVideoLocalBitrate(_: Void = ()) -> String {
        return NSLocalizedString("call.videoLocalBitrate", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 松开发送
      static func messageToolBarRecordSend(_: Void = ()) -> String {
        return NSLocalizedString("message.toolBar.record.send", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 模拟器不支持录像
      static func messageSimulatorNotSupportVideo(_: Void = ()) -> String {
        return NSLocalizedString("message.simulatorNotSupportVideo", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 模拟器不支持拍照
      static func messageSimulatorNotSupportCamera(_: Void = ()) -> String {
        return NSLocalizedString("message.simulatorNotSupportCamera", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在上传...
      static func settingUploading(_: Void = ()) -> String {
        return NSLocalizedString("setting.uploading", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在下载语音，稍后点击
      static func messageDownloadingAudio(_: Void = ()) -> String {
        return NSLocalizedString("message.downloadingAudio", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在初始化通话...
      static func callInit(_: Void = ()) -> String {
        return NSLocalizedString("call.init", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在删除成员...
      static func groupRemovingOccupant(_: Void = ()) -> String {
        return NSLocalizedString("group.removingOccupant", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在加入...
      static func chatroomJoining(_: Void = ()) -> String {
        return NSLocalizedString("chatroom.joining", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在发送申请...
      static func friendSendApply(_: Void = ()) -> String {
        return NSLocalizedString("friend.sendApply", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在发送申请...
      static func sendingApply(_: Void = ()) -> String {
        return NSLocalizedString("sendingApply", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在定位...
      static func locationOngoning(_: Void = ()) -> String {
        return NSLocalizedString("location.ongoning", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在将成员加入黑名单...
      static func groupBanAdding(_: Void = ()) -> String {
        return NSLocalizedString("group.ban.adding", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在将成员移出黑名单...
      static func groupBanRemoving(_: Void = ()) -> String {
        return NSLocalizedString("group.ban.removing", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在建立连接...
      static func callConnecting(_: Void = ()) -> String {
        return NSLocalizedString("call.connecting", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在搜索
      static func searching(_: Void = ()) -> String {
        return NSLocalizedString("searching", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在注册...
      static func registerOngoing(_: Void = ()) -> String {
        return NSLocalizedString("register.ongoing", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在登陆...
      static func loginOngoing(_: Void = ()) -> String {
        return NSLocalizedString("login.ongoing", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在结束通话...
      static func callDealloc(_: Void = ()) -> String {
        return NSLocalizedString("call.dealloc", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在获取大图...
      static func messageDownloadingImage(_: Void = ()) -> String {
        return NSLocalizedString("message.downloadingImage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在获取视频...
      static func messageDownloadingVideo(_: Void = ()) -> String {
        return NSLocalizedString("message.downloadingVideo", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在退出...
      static func settingLogoutOngoing(_: Void = ()) -> String {
        return NSLocalizedString("setting.logoutOngoing", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在通话中...
      static func callIn(_: Void = ()) -> String {
        return NSLocalizedString("call.in", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 正在重连中...
      static func reconnectionOngoing(_: Void = ()) -> String {
        return NSLocalizedString("reconnection.ongoing", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 此设置会导致全天都处于免打扰模式, 不会再收到推送消息. 是否继续?
      static func settingSureNotDisturb(_: Void = ()) -> String {
        return NSLocalizedString("setting.sureNotDisturb", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 没有找到
      static func notFound(_: Void = ()) -> String {
        return NSLocalizedString("notFound", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 没有更多数据了
      static func noMore(_: Void = ()) -> String {
        return NSLocalizedString("noMore", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 注册
      static func register(_: Void = ()) -> String {
        return NSLocalizedString("register", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 注册失败
      static func registerFail(_: Void = ()) -> String {
        return NSLocalizedString("register.fail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 注册成功，请登陆
      static func registerSuccess(_: Void = ()) -> String {
        return NSLocalizedString("register.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 注册推送失败
      static func apnsFailToRegisterApns(_: Void = ()) -> String {
        return NSLocalizedString("apns.failToRegisterApns", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 消息已经清空
      static func messageNoMessage(_: Void = ()) -> String {
        return NSLocalizedString("message.noMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 消息推送与设备绑定失败
      static func apnsFailToBindDeviceToken(_: Void = ()) -> String {
        return NSLocalizedString("apns.failToBindDeviceToken", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 消息推送设置
      static func titleApnsSetting(_: Void = ()) -> String {
        return NSLocalizedString("title.apnsSetting", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 添加
      static func add(_: Void = ()) -> String {
        return NSLocalizedString("add", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 添加公开群
      static func groupCreateJoin(_: Void = ()) -> String {
        return NSLocalizedString("group.create.join", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 添加好友
      static func friendAdd(_: Void = ()) -> String {
        return NSLocalizedString("friend.add", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 添加成员
      static func groupCreateAddOccupant(_: Void = ()) -> String {
        return NSLocalizedString("group.create.addOccupant", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 添加组成员...
      static func groupAddingOccupant(_: Void = ()) -> String {
        return NSLocalizedString("group.addingOccupant", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 添加群成员失败, 请稍后再试
      static func groupAddOccupantFail(_: Void = ()) -> String {
        return NSLocalizedString("group.addOccupantFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 清空聊天记录
      static func groupRemoveAllMessages(_: Void = ()) -> String {
        return NSLocalizedString("group.removeAllMessages", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 环信Demo
      static func appName(_: Void = ()) -> String {
        return NSLocalizedString("AppName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 环信助手
      static func titleRobotlist(_: Void = ()) -> String {
        return NSLocalizedString("title.robotlist", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 用户名不支持中文
      static func loginNameNotSupportZh(_: Void = ()) -> String {
        return NSLocalizedString("login.nameNotSupportZh", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 申请与通知
      static func titleApply(_: Void = ()) -> String {
        return NSLocalizedString("title.apply", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 申请已发送
      static func groupSendApplyRepeat(_: Void = ()) -> String {
        return NSLocalizedString("group.sendApplyRepeat", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 登出
      static func logout(_: Void = ()) -> String {
        return NSLocalizedString("logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 登录
      static func login(_: Void = ()) -> String {
        return NSLocalizedString("login", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 登录失败
      static func loginFail(_: Void = ()) -> String {
        return NSLocalizedString("login.fail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 相册上传
      static func settingLocalUpload(_: Void = ()) -> String {
        return NSLocalizedString("setting.localUpload", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 确定
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 确定(%i)
      static func doneWithCount(_ value1: Int) -> String {
        return String(format: NSLocalizedString("doneWithCount", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 确认密码
      static func confirmpassword(_: Void = ()) -> String {
        return NSLocalizedString("confirmpassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 离线消息接收成功
      static func messageEndReceiveOffine(_: Void = ()) -> String {
        return NSLocalizedString("message.endReceiveOffine", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 私有群
      static func groupCreatePrivate(_: Void = ()) -> String {
        return NSLocalizedString("group.create.private", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 等待接听...
      static func callWaiting(_: Void = ()) -> String {
        return NSLocalizedString("call.waiting", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 继续等待
      static func reconnectionWait(_: Void = ()) -> String {
        return NSLocalizedString("reconnection.wait", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 缩略图获取失败!
      static func messageThumImageFail(_: Void = ()) -> String {
        return NSLocalizedString("message.thumImageFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 网络未连接!
      static func errorConnectNetworkFail(_: Void = ()) -> String {
        return NSLocalizedString("error.connectNetworkFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 群主
      static func groupOwner(_: Void = ()) -> String {
        return NSLocalizedString("group.owner", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 群成员个数超了最大值了
      static func groupMaxUserCount(_: Void = ()) -> String {
        return NSLocalizedString("group.maxUserCount", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 群组
      static func titleGroup(_: Void = ()) -> String {
        return NSLocalizedString("title.group", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 群组ID
      static func groupId(_: Void = ()) -> String {
        return NSLocalizedString("group.id", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 群组人数
      static func groupOccupantCount(_: Void = ()) -> String {
        return NSLocalizedString("group.occupantCount", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 群组权限
      static func groupCreateGroupPermission(_: Void = ()) -> String {
        return NSLocalizedString("group.create.groupPermission", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 群组简介
      static func groupDescribe(_: Void = ()) -> String {
        return NSLocalizedString("group.describe", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 群组通知
      static func titleGroupApply(_: Void = ()) -> String {
        return NSLocalizedString("title.groupApply", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 群组黑名单
      static func titleGroupBlackList(_: Void = ()) -> String {
        return NSLocalizedString("title.groupBlackList", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 群设置
      static func titleGroupSetting(_: Void = ()) -> String {
        return NSLocalizedString("title.groupSetting", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 聊天室
      static func titleChatroom(_: Void = ()) -> String {
        return NSLocalizedString("title.chatroom", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 聊天室Id
      static func chatroomId(_: Void = ()) -> String {
        return NSLocalizedString("chatroom.id", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 聊天室人数
      static func chatroomOccupantCount(_: Void = ()) -> String {
        return NSLocalizedString("chatroom.occupantCount", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 聊天室列表
      static func titleChatroomlist(_: Void = ()) -> String {
        return NSLocalizedString("title.chatroomlist", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 自动登录
      static func settingAutoLogin(_: Void = ()) -> String {
        return NSLocalizedString("setting.autoLogin", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 自动登录失败.
      static func loginErrorAutoLogin(_: Void = ()) -> String {
        return NSLocalizedString("login.errorAutoLogin", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 自动登录开始...
      static func loginBeginAutoLogin(_: Void = ()) -> String {
        return NSLocalizedString("login.beginAutoLogin", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 自动登录结束...
      static func loginEndAutoLogin(_: Void = ()) -> String {
        return NSLocalizedString("login.endAutoLogin", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 获取群组详情失败，请稍后重试
      static func groupFetchInfoFail(_: Void = ()) -> String {
        return NSLocalizedString("group.fetchInfoFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 获取群组黑名单...
      static func groupBanFetching(_: Void = ()) -> String {
        return NSLocalizedString("group.ban.fetching", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 获取聊天室详情失败
      static func chatroomFetchInfoFail(_: Void = ()) -> String {
        return NSLocalizedString("chatroom.fetchInfoFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 获取黑名单失败: %@
      static func groupBanFetchFail(_ value1: String) -> String {
        return String(format: NSLocalizedString("group.ban.fetchFail", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 被拒绝加入群组'%@'
      static func groupBeRefusedToJoin(_ value1: String) -> String {
        return String(format: NSLocalizedString("group.beRefusedToJoin", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 被踢出聊天室'%@'
      static func chatroomRemove(_ value1: String) -> String {
        return String(format: NSLocalizedString("chatroom.remove", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 视频
      static func messageVideo(_: Void = ()) -> String {
        return NSLocalizedString("message.video", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 视频获取失败!
      static func messageVideoFail(_: Void = ()) -> String {
        return NSLocalizedString("message.videoFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 解散群组
      static func groupDestroy(_: Void = ()) -> String {
        return NSLocalizedString("group.destroy", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 解散群组失败
      static func groupDestroyFail(_: Void = ()) -> String {
        return NSLocalizedString("group.destroyFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 设置
      static func titleSetting(_: Void = ()) -> String {
        return NSLocalizedString("title.setting", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 设置失败
      static func groupSettingFail(_: Void = ()) -> String {
        return NSLocalizedString("group.setting.fail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 设置属性
      static func groupSettingSave(_: Void = ()) -> String {
        return NSLocalizedString("group.setting.save", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 设置成功
      static func groupSettingSuccess(_: Void = ()) -> String {
        return NSLocalizedString("group.setting.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 设置此昵称以后,在与iOS客户端demo聊天工程中,iOS一侧会显示此昵称而不是环信ID,如果对方使用安卓客户端则此设置不生效
      static func settingEdittips(_: Void = ()) -> String {
        return NSLocalizedString("setting.edittips", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 诊断
      static func titleDebug(_: Void = ()) -> String {
        return NSLocalizedString("title.debug", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 详细资料
      static func titleProfile(_: Void = ()) -> String {
        return NSLocalizedString("title.profile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 语音录制还没有结束
      static func errorRecordStoping(_: Void = ()) -> String {
        return NSLocalizedString("error.recordStoping", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 说点啥子吧
      static func saySomething(_: Void = ()) -> String {
        return NSLocalizedString("saySomething", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 请在iOS"设置中"-"隐私"-"相机"中打开
      static func settingCameraAuthority(_: Void = ()) -> String {
        return NSLocalizedString("setting.cameraAuthority", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 请在iOS"设置中"-"隐私"-"麦克风"中打开
      static func settingMicrophoneAuthority(_: Void = ()) -> String {
        return NSLocalizedString("setting.microphoneAuthority", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 请确定删除
      static func sureToDelete(_: Void = ()) -> String {
        return NSLocalizedString("sureToDelete", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 请等待...
      static func wait(_: Void = ()) -> String {
        return NSLocalizedString("wait", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 请输入新昵称
      static func settingInputName(_: Void = ()) -> String {
        return NSLocalizedString("setting.inputName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 请输入群组名称
      static func groupCreateInputName(_: Void = ()) -> String {
        return NSLocalizedString("group.create.inputName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 请输入群组名称
      static func groupSettingSubject(_: Void = ()) -> String {
        return NSLocalizedString("group.setting.subject", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 请输入群组简介
      static func groupCreateInputDescribe(_: Void = ()) -> String {
        return NSLocalizedString("group.create.inputDescribe", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 请输入账号和密码
      static func loginInputNameAndPswd(_: Void = ()) -> String {
        return NSLocalizedString("login.inputNameAndPswd", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 输入新消息
      static func messageToolBarInputPlaceHolder(_: Void = ()) -> String {
        return NSLocalizedString("message.toolBar.inputPlaceHolder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 输入要查找的好友
      static func friendInputNameToSearch(_: Void = ()) -> String {
        return NSLocalizedString("friend.inputNameToSearch", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 还没有开始语音录制
      static func errorRecordNotBegin(_: Void = ()) -> String {
        return NSLocalizedString("error.recordNotBegin", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 连接服务器失败!
      static func errorConnectServerFail(_: Void = ()) -> String {
        return NSLocalizedString("error.connectServerFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 连接服务器超时!
      static func errorConnectServerTimeout(_: Void = ()) -> String {
        return NSLocalizedString("error.connectServerTimeout", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 退出登录(%@)
      static func settingLoginUser(_ value1: String) -> String {
        return String(format: NSLocalizedString("setting.loginUser", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: 退出群组
      static func groupLeave(_: Void = ()) -> String {
        return NSLocalizedString("group.leave", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 退出群组失败
      static func groupLeaveFail(_: Void = ()) -> String {
        return NSLocalizedString("group.leaveFail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 退群时删除会话
      static func settingDeleteConWhenLeave(_: Void = ()) -> String {
        return NSLocalizedString("setting.deleteConWhenLeave", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 选择
      static func choose(_: Void = ()) -> String {
        return NSLocalizedString("choose", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 选择联系人
      static func titleChooseContact(_: Void = ()) -> String {
        return NSLocalizedString("title.chooseContact", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 通知显示消息详情
      static func settingShowDetail(_: Void = ()) -> String {
        return NSLocalizedString("setting.showDetail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 通讯录
      static func titleAddressbook(_: Void = ()) -> String {
        return NSLocalizedString("title.addressbook", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 通话失败
      static func callFailed(_: Void = ()) -> String {
        return NSLocalizedString("call.failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 通话已挂断
      static func callSuspended(_: Void = ()) -> String {
        return NSLocalizedString("call.suspended", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 通话建立失败
      static func callInitFailed(_: Void = ()) -> String {
        return NSLocalizedString("call.initFailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 通话结束
      static func callOver(_: Void = ()) -> String {
        return NSLocalizedString("call.over", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 重连失败，稍候将继续重连
      static func reconnectionFail(_: Void = ()) -> String {
        return NSLocalizedString("reconnection.fail", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 重连成功！
      static func reconnectionSuccess(_: Void = ()) -> String {
        return NSLocalizedString("reconnection.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 错误
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("error", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 随便加入
      static func groupCreateOpen(_: Void = ()) -> String {
        return NSLocalizedString("group.create.open", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 静音
      static func callSilence(_: Void = ()) -> String {
        return NSLocalizedString("call.silence", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 音频
      static func messageVoice(_: Void = ()) -> String {
        return NSLocalizedString("message.voice", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 黑名单
      static func friendBlack(_: Void = ()) -> String {
        return NSLocalizedString("friend.black", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: 黑名单
      static func titleBuddyBlock(_: Void = ()) -> String {
        return NSLocalizedString("title.buddyBlock", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_light") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_light' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}